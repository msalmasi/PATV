<%- include('layout', { title: 'Shop', user: user}) %>
<link rel="stylesheet" href="/public/css/shop.css">
<div class="shop-container">
    <h1 class="shop-title">PAT Redemption Codes</h1>
    <form id="codeform" action="/api/redeem-code" method="post">
        <input type="text" id="code" name="code" placeholder="Enter your redemption code" required>
        <button class="code-btn" type="submit">Redeem</button>
    </form>
    <div id="codeStatus" class="spin-status"></div>
</div>
<div class="shop-container">
    <div id="shopStatus" class="spin-status"></div>
    <h1 class="shop-title">Arcade Shop</h1>
    
    <div class="product-list">
        <!-- Items will be dynamically inserted here -->
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const productList = document.querySelector('.product-list');
    
        // Fetch prizes from the API
        fetch('/api/prizes')
        .then(response => response.json())
        .then(prizes => {
            // Ensure prizes data is an array and not empty
            if (Array.isArray(prizes) && prizes.length) {
                prizes.forEach(prize => {
                    const li = document.createElement('div');
                    li.className = 'product-item';
                    li.innerHTML = `
                        <div class="buy-btn-div">
                        <h3>${prize.prize}</h3>
                        </div>
                        <div class="buy-btn-div">
                        <p>PAT ${prize.cost.toLocaleString()}</p>
                        </div>
                        <div class="buy-btn-div">
                        <p>${prize.quantity.toLocaleString()} Left</p>
                        </div>
                        <div class="buy-btn-div">
                        <button class="buy-btn" data-product="${prize.prizeId}">Buy</button>
                        </div>
                    `;
                    productList.appendChild(li);
                });
                addBuyButtonEventListeners();  // Call to add event listeners after elements are created
            } else {
                productList.innerHTML = '<li>No prizes available at the moment.</li>';
            }
        })
        .catch(error => {
            console.error('Failed to fetch prizes:', error);
            productList.innerHTML = '<li>Error loading prizes. Please try again later.</li>';
        });
    
        // Function to handle purchase buttons
        function addBuyButtonEventListeners() {
            document.querySelectorAll('.buy-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const product = this.getAttribute('data-product');
                    fetch(`/shop`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ product: product })
                    })
                    .then(response => {
            if (!response.ok) { // Handle non-200 responses
                throw new Error('Failed to buy the item.');
            }
            return response.json();
        })
                    .then(data => {
                        const message = data.message;
            if (message.includes("successful")) { // Check that the spin actually happened / is not in progress. Don't update spinId if so.
            console.log("booboo");
            document.getElementById('shopStatus').style.visibility = 'hidden'; // Remove the animation element after it completes
            document.getElementById('shopStatus').textContent = 'Purchased item successfully.'; // Display error message
            document.getElementById('shopStatus').style.visibility = 'visible'; // Make the status message visible
            }
                    })
                    .catch(error => {
                        console.error('Error making the POST request:', error);
            document.getElementById('shopStatus').textContent = 'Failed to purchase item.........'; // Display error message
            document.getElementById('shopStatus').style.visibility = 'visible'; // Make the status message visible
            setTimeout(() => {
                document.getElementById('shopStatus').style.visibility = 'hidden'; // Remove the animation element after it completes
        }, 2000); 
                    });
                });
            });
        }
    });
    </script>

<script>
    document.getElementById('codeform').addEventListener('submit', function(event) {
    event.preventDefault();
    var code = document.getElementById('code').value;


    fetch('/api/redeem-code', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({code: code})
    })
    .then(response => {
            if (!response.ok) { // Handle non-200 responses
                throw new Error('Failed to add the redemption code.');
            }
            return response.json();
        })
        .then(data => {
            const message = data.message;
            if (message.includes("successfully")) { // Check that the spin actually happened / is not in progress. Don't update spinId if so.
            document.getElementById('codeStatus').style.visibility = 'hidden'; // Remove the animation element after it completes
            document.getElementById('codeStatus').textContent = 'Added redemption code successfully.'; // Display error message
            document.getElementById('codeStatus').style.visibility = 'visible'; // Make the status message visible
            }
        })
        .catch(error => {
            console.error('Error making the POST request:', error);
            document.getElementById('codeStatus').textContent = 'Failed to add the redemption code.........'; // Display error message
            document.getElementById('codeStatus').style.visibility = 'visible'; // Make the status message visible
            setTimeout(() => {
                document.getElementById('codeStatus').style.visibility = 'hidden'; // Remove the animation element after it completes
        }, 2000); 
        });
});
</script>