<%- include('layout', { title: 'Admin Panel', user: user}) %>
<body>
    <div class="panel">
    <h1>Admin Panel</h1>
    <h2>Welcome, <%= user %>!</h2>
    <% if (errors != "") { %>
        <div class="alert alert-danger"><br><br><%= errors %></div>
    <% } %>
    <% if (success != "") { %>
        <div class="alert alert-success"><br><br><%= success %></div>
    <% } %>
        </div>

        
    <div class="panel">
        <h3>Create Redemption Code</h3>
    <form action="/api/admin/redemption-codes" method="post">
        <input type="text" name="code" placeholder="Enter code" required>
        <input type="number" name="points" placeholder="Point value" required>
        <input type="number" name="uses_allowed" placeholder="Number of uses" required>
        <input type="date" name="expiration_date" placeholder="Expiration date">
        <button type="submit">Save Code</button>
    </form>
    </div>

    <div class="panel">
        <h3>Existing Redemption Codes</h3>
    <div id="redemptionCodesList"></div>
    </div>

    <div class="panel">
    <form id="badges" action="/api/badges/add" method="post">

          <label for="name">Badge Name:</label>
          <input type="text" id="name" name="name" required>
          <label for="description">Description:</label>
          <textarea id="description" name="description" required></textarea>
          <label for="points">Points:</label>
          <input type="number" id="points" name="points" required>
          <label for="icon">Icon URL:</label>
          <input type="text" id="icon" name="icon">
          <label for="requirement">Requirement:</label>
          <input type="text" id="requirement" name="requirement" required>
        <button type="submit">Create Badge</button>
      </form>
      </div>

          <!-- Badge Management -->
    <div class="panel">
        <h3>Existing Badges</h3>
        <div id="badgesList"></div>
    </div>

<script>
    document.getElementById('badges').addEventListener('submit', function(event) {
    event.preventDefault();
    var formData = new FormData(this); // Use FormData to handle data correctly

    fetch(this.action, {
        method: 'POST',
        body: formData // FormData will set the Content-Type to multipart/form-data automatically
    })
    .then(response => response.json())
    .then(data => {
        console.log('Success:', data);
        // Additional logic to handle response
    })
    .catch(error => {
        console.error('Error:', error);
    });
});
</script>
    <!-- Manual Wheel Spin Form -->
    <div class="panel">
    <h3>Manual Wheel Spin</h3>
    <form id="manualSpinForm" action="/api/g/wheel/jackpot" method="POST">
        <label for="username">Username:</label>
        <input type="text" id="spinUsername" name="username" required>
        <button id="spin" type="submit">Spin Wheel</button>
    </form>
    <div id="spinStatus" class="spin-status"></div>
    </div> 

<script>
    document.getElementById('manualSpinForm').addEventListener('submit', function(event) {
        event.preventDefault();
    
        var username = document.getElementById('spinUsername').value;
        fetch('/api/g/wheel/spin', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({username: username})
        })
        .then(response => {
            if (!response.ok) { // Handle non-200 responses
                throw new Error('Spin already in progress');
            }
            return response.json();
        })
        .then(data => {
            if (data.spinId !== undefined) { // Check that the spin actually happened / is not in progress. Don't update spinId if so.
            document.getElementById('spinStatus').style.visibility = 'hidden'; // Hide the status message
            }
        })
        .catch(error => {
            console.error('Error making the POST request:', error);
            document.getElementById('spinStatus').textContent = 'Spin is currently in progress...'; // Display error message
            document.getElementById('spinStatus').style.visibility = 'visible'; // Make the status message visible
            setTimeout(() => {
                document.getElementById('spinStatus').style.visibility = 'hidden'; // Remove the animation element after it completes
        }, 2000); 
        });
    });
</script>

    <!-- Jackpot Panel -->
    <div class="panel">
    <h3>Jackpot Panel</h3>
    <form id='jackpotForm' action="/api/g/wheel/jackpot" method="POST">
        <label for="jackpotAmount">Amount:</label>
        <input type="number" id="jackpotAmount" name="amount" required>
        <button type="submit">Update Jackpot</button>
        <div id="jackpotStatus" class="spin-status"></div>
    </form>
    </div> 

    <script>
        document.getElementById('jackpotForm').addEventListener('submit', function(event) {
            event.preventDefault();
        
            var jackpotAmount = document.getElementById('jackpotAmount').value;
            fetch('/api/g/wheel/jackpot', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({amount: jackpotAmount})
            })
            .then(response => {
                if (!response.ok) { // Handle non-200 responses
                    throw new Error('Failed to update the jackpot.');
                }
                return response.json();
            })
            .then(data => {
                const message = data.message;
                console.log(message);
                if (message.includes("successfully")) { // Check that the spin actually happened / is not in progress. Don't update spinId if so.
                document.getElementById('jackpotStatus').style.visibility = 'hidden'; // Remove the animation element after it completes
                document.getElementById('jackpotStatus').textContent = 'Jackpot updated successfully.'; // Display error message
                document.getElementById('jackpotStatus').style.visibility = 'visible'; // Make the status message visible
                }
            })
            .catch(error => {
                console.error('Error making the POST request:', error);
                document.getElementById('jackpotStatus').textContent = 'Failed to update the jackpot.........'; // Display error message
                document.getElementById('jackpotStatus').style.visibility = 'visible'; // Make the status message visible
                setTimeout(() => {
                    document.getElementById('jackpotStatus').style.visibility = 'hidden'; // Remove the animation element after it completes
            }, 2000); 
            });
        });
    </script>
    
    <!-- Points Panel -->
    <div class="panel">
    <h3>Points Panel</h3>
    <form id="pointsTransferForm" action="/api/admin/transfer/username" method="POST">
        <label for="pointsUsername">Username:</label>
        <input type="text" id="pointsUsername" name="username" required>
        <label for="pointsAmount">Amount:</label>
        <input type="number" id="pointsAmount" name="amount" required>
        <button type="submit">Transfer Points</button>
        <div id="transferStatus" class="spin-status"></div>

    </form>
    </div>
    
    <!-- This edits the URL in the POST form. -->
    <script>
        document.getElementById('pointsTransferForm').addEventListener('submit', function(event) {
            event.preventDefault();
        
            var amount = document.getElementById('pointsAmount').value;
            var username = document.getElementById('pointsUsername').value;

            console.log(username);
            // Prepare the fetch request
            fetch(this.getAttribute('action').replace('username', encodeURIComponent(username)), {
                headers: {    "content-type": "application/json",},
                body: JSON.stringify({ amount: amount }),
                method: 'POST',
            }).then(response => {
                if (!response.ok) { // Handle non-200 responses
                    throw new Error('Failed to transfer the points.');
                }
                return response.json();
            }).then(data => {
                const message = data.message;
                console.log(message);
                if (message.includes("successfully")) { // Check that the spin actually happened / is not in progress. Don't update spinId if so.
                document.getElementById('transferStatus').style.visibility = 'hidden'; // Remove the animation element after it completes
                document.getElementById('transferStatus').textContent = 'PAT transferred successfully.'; // Display error message
                document.getElementById('transferStatus').style.visibility = 'visible'; // Make the status message visible
                }
            }).catch(error => {
                console.error('Error making the POST request:', error);
                document.getElementById('transferStatus').textContent = 'Transfer failed. Check the username.'; // Display error message
                document.getElementById('transferStatus').style.visibility = 'visible'; // Make the status message visible
                setTimeout(() => {
                    document.getElementById('transferStatus').style.visibility = 'hidden'; // Remove the animation element after it completes
            }, 2000); 
            });
        });
    </script>

    <!-- User Class Assignment Form -->
    <div class="panel">
    <h3>Assign User Class</h3>
    <form id="classEditForm" action="/api/u/username/class/update" method="POST" onsubmit="return setUsernameAction(this)">
        <label for="userClassUsername">Username:</label>
        <input type="text" id="userClassUsername" name="username" required>
    
        <label for="userClass">Class:</label>
        <select name="class" id="userClass" required>
            <option value="">Select a class...</option>
        </select>
        <button type="submit">Set Class</button>
        <div id="classEditStatus" class="spin-status"></div>
    </form>
    </div>

        <!-- This edits the URL in the POST form. -->
        <script>
            document.getElementById('classEditForm').addEventListener('submit', function(event) {
                event.preventDefault();
                const username = document.getElementById('userClassUsername').value;
                const classSelect = document.getElementById('userClass').value;
                console.log(username);
                // Prepare the fetch request
                fetch(this.getAttribute('action').replace('username', encodeURIComponent(username)), {
                    headers: {    "content-type": "application/json",},
                    body: JSON.stringify({ class: classSelect }),
                    method: 'POST',
                }).then(response => {
                    if (!response.ok) { // Handle non-200 responses
                        throw new Error('Failed to edit class.');
                    }
                    return response.json();
                }).then(data => {
                    const message = data.message;
                    console.log(message);
                    if (message.includes("successfully")) { // Check that the spin actually happened / is not in progress. Don't update spinId if so.
                    document.getElementById('classEditStatus').style.visibility = 'hidden'; // Remove the animation element after it completes
                    document.getElementById('classEditStatus').textContent = 'Class edited successfully.'; // Display error message
                    document.getElementById('classEditStatus').style.visibility = 'visible'; // Make the status message visible
                    }
                }).catch(error => {
                    console.error('Error making the POST request:', error);
                    document.getElementById('classEditStatus').textContent = 'Class change failed. Check the username.'; // Display error message
                    document.getElementById('classEditStatus').style.visibility = 'visible'; // Make the status message visible
                    setTimeout(() => {
                        document.getElementById('classEditStatus').style.visibility = 'hidden'; // Remove the animation element after it completes
                }, 2000); 
                });
            });
        </script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const classSelect = document.getElementById('userClass');
        
            fetch('/api/classes')
            .then(response => response.json())
            .then(classes => {
                classes.forEach(className => {
                    const option = document.createElement('option');
                    option.value = className;
                    option.textContent = className;
                    classSelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Failed to load classes:', error);
            });
        });
        
        </script>
    

    <!-- Class List Management Form -->
    <div class="panel">
    <h3>Manage Classes</h3>
    <form id="classListForm" action="/api/classes/edit" method="POST">
        <label for="classAction">Action:</label>
        <select name="action" id="classAction" required>
            <option value="add">Add</option>
            <option value="remove">Remove</option>
        </select>
    <br>
    <br>
        <label for="className">Class Name:</label>
        <input type="text" id="className" name="className" required>
        
        <button type="submit">Submit</button>
        <div id="classListStatus" class="spin-status"></div>
    </form>

    <div id="currentClasses">
        <h4>Current Classes:</h4>
        <ul id="classList"></ul>
    </div>
    </div>

            <!-- This edits the URL in the POST form. -->
            <script>
                document.getElementById('classListForm').addEventListener('submit', function(event) {
                    event.preventDefault();
                    const action = document.getElementById('classAction').value;
                    const className = document.getElementById('className').value;
                    console.log(className);
                    // Prepare the fetch request
                    fetch('/api/classes/edit', {
                        headers: {    "content-type": "application/json",},
                        body: JSON.stringify({ action: action, className: className }),
                        method: 'POST',
                    }).then(response => {
                        if (!response.ok) { // Handle non-200 responses
                            throw new Error('Failed to edit class list.');
                        }
                        return response.json();
                    }).then(data => {
                        fetch('/api/classes')
                            .then(response => response.json())
                            .then(data => {
                                const classList = document.getElementById('classList');
                                classList.innerHTML = "";
                                data.forEach(cls => {
                                    const li = document.createElement('li');
                                    li.textContent = cls;
                                    classList.appendChild(li);
                                });
                            })
                            .catch(error => console.error('Error fetching classes:', error));
                        const message = data.message;
                        console.log(message);
                        if (message.includes("successfully")) { // Check that the spin actually happened / is not in progress. Don't update spinId if so.
                        document.getElementById('classListStatus').style.visibility = 'hidden'; // Remove the animation element after it completes
                        document.getElementById('classListStatus').textContent = 'Class list edited successfully.'; // Display error message
                        document.getElementById('classListStatus').style.visibility = 'visible'; // Make the status message visible
                        }
                    }).catch(error => {
                        console.error('Error making the POST request:', error);
                        document.getElementById('classListStatus').textContent = 'Class list change failed. Check the classname.'; // Display error message
                        document.getElementById('classListStatus').style.visibility = 'visible'; // Make the status message visible
                        setTimeout(() => {
                            document.getElementById('classListStatus').style.visibility = 'hidden'; // Remove the animation element after it completes
                    }, 2000); 
                    });
                });
            </script>

    <!-- PRize List Management Form -->
    <div class="panel">
        <h3>Manage Prizes</h3>
        <form id="prizeListForm" action="/api/prizes/edit" method="POST">
            <label for="prizeAction">Action:</label>
            <select name="action" id="prizeAction" required>
                <option value="add">Add</option>
                <option value="remove">Remove</option>
            </select>
    
            <label for="prizeName">Prize Name:</label>
            <input type="text" id="prizeName" name="prizeName" required>
            <div id="costContainer">  <!-- Container for the cost input -->
                <label for="cost">Prize Cost:</label>
                <input type="text" id="prizeCost" name="cost">
            </div>
            <button type="submit">Submit</button>
            <div id="PrizeListStatus" class="spin-status"></div>
        </form>
    
        <div id="currentPrizes">
            <h4>Current Prizes:</h4>
            <ul id="prizeList"></ul>
        </div>
            <!-- This edits the URL in the POST form. -->
            <script>
                document.getElementById('prizeListForm').addEventListener('submit', function(event) {
                    event.preventDefault();
                    const action = document.getElementById('prizeAction').value;
                    const prizeName = document.getElementById('prizeName').value;
                    const cost = document.getElementById('prizeCost').value;
                    // Prepare the fetch request
                    fetch('/api/prizes/edit', {
                        headers: {    "content-type": "application/json",},
                        body: JSON.stringify({ action: action, prizeName: prizeName, cost: cost }),
                        method: 'POST',
                    }).then(response => {
                        if (!response.ok) { // Handle non-200 responses
                            throw new Error('Failed to edit prize list.');
                        }
                        return response.json();
                    }).then(data => {
                        fetch('/api/prizes')
                            .then(response => response.json())
                            .then(data => {
                                const prizeList = document.getElementById('prizeList');
                                prizeList.innerHTML = "";
                                // Ensure data is an array and has items
                                if (Array.isArray(data) && data.length > 0) {
                                    data.forEach(prize => {
                                        const li = document.createElement('li');
                                        // Assuming each 'prize' object has 'prize' and 'cost' properties
                                        li.textContent = `${prize.prize} - Cost: ${prize.cost} Coins`;
                                        prizeList.appendChild(li);
                                    });
                                } else {
                                    // Handle case where no prizes are returned or data is not in expected format
                                    const li = document.createElement('li');
                                    li.textContent = 'No prizes available.';
                                    prizeList.appendChild(li);
                                }
                            })
                            .catch(error => {
                                console.error('Error fetching prizes:', error);
                                const prizeList = document.getElementById('prizeList');
                                const li = document.createElement('li');
                                li.textContent = 'Failed to load prizes.';
                                prizeList.appendChild(li);
                            });
                        const message = data.message;
                        console.log(message);
                        if (message.includes("successfully")) { // Check that the spin actually happened / is not in progress. Don't update spinId if so.
                        document.getElementById('PrizeListStatus').style.visibility = 'hidden'; // Remove the animation element after it completes
                        document.getElementById('PrizeListStatus').textContent = 'Class list edited successfully.'; // Display error message
                        document.getElementById('PrizeListStatus').style.visibility = 'visible'; // Make the status message visible
                        }
                    }).catch(error => {
                        console.error('Error making the POST request:', error);
                        document.getElementById('PrizeListStatus').textContent = 'Class list change failed. Check the classname.'; // Display error message
                        document.getElementById('PrizeListStatus').style.visibility = 'visible'; // Make the status message visible
                        setTimeout(() => {
                            document.getElementById('PrizeListStatus').style.visibility = 'hidden'; // Remove the animation element after it completes
                    }, 2000); 
                    });
                });
            </script>

</body>
<script>
    window.onload = function() {
        fetch('/api/classes')
        .then(response => response.json())
        .then(data => {
            const classList = document.getElementById('classList');
            data.forEach(cls => {
                const li = document.createElement('li');
                li.textContent = cls;
                classList.appendChild(li);
            });
        })
        .catch(error => console.error('Error fetching classes:', error));

        fetch('/api/prizes')
        .then(response => response.json())
        .then(data => {
            const prizeList = document.getElementById('prizeList');
            // Ensure data is an array and has items
            if (Array.isArray(data) && data.length > 0) {
                data.forEach(prize => {
                    const li = document.createElement('li');
                    // Assuming each 'prize' object has 'prize' and 'cost' properties
                    li.textContent = `${prize.prize} - Cost: ${prize.cost} Coins`;
                    prizeList.appendChild(li);
                });
            } else {
                // Handle case where no prizes are returned or data is not in expected format
                const li = document.createElement('li');
                li.textContent = 'No prizes available.';
                prizeList.appendChild(li);
            }
        })
        .catch(error => {
            console.error('Error fetching prizes:', error);
            const prizeList = document.getElementById('prizeList');
            const li = document.createElement('li');
            li.textContent = 'Failed to load prizes.';
            prizeList.appendChild(li);
        });

    const actionSelect = document.getElementById('prizeAction');
    const costContainer = document.getElementById('costContainer');

    function toggleCostInput() {
        if (actionSelect.value === 'add') {
            costContainer.style.display = 'block';
        } else {
            costContainer.style.display = 'none';
        }
    }

    actionSelect.addEventListener('change', toggleCostInput);
    toggleCostInput(); // To set initial visibility state

    fetchRedemptionCodes();

function fetchRedemptionCodes() {
    fetch('/api/admin/redemption-codes')
        .then(response => response.json())
        .then(data => {
            const list = document.getElementById('redemptionCodesList');
            list.innerHTML = ''; // Clear previous list
            data.forEach(code => {
                const codeElement = document.createElement('div');
                codeElement.innerHTML = `
                    <button class="link-button" onclick="toggleCodeUsers('${code.code}', this)"><span>${code.code}</span></button><span>${code.uses_remaining} left</span><button class="link-button" onclick="deleteCode('${code.code}')"><span>❌</span></button>
                    
                    <ul id="users-${code.code}" style="display:none;"></ul>
                `;
                list.appendChild(codeElement);
            });
        });
}

window.deleteCode = function(code) {
    fetch(`/api/admin/redemption-codes/${code}`, { method: 'DELETE' })
        .then(response => {
            if (response.ok) fetchRedemptionCodes();
            else alert('Failed to delete code');
        });
};

window.toggleCodeUsers = function(code, button) {
        const userList = document.getElementById(`users-${code}`);
        if (userList.style.display === 'none') {
            fetch(`/api/admin/redemption-codes/${code}/users`)
                .then(response => response.json())
                .then(data => {
                    userList.innerHTML = ''; // Clear list
                    data.forEach(user => {
                        const userItem = document.createElement('li');
                        userItem.textContent = `${user.username} (User ID: ${user.userId})`;
                        userList.appendChild(userItem);
                    });
                    userList.style.display = 'block';
                });
        } else {
            userList.style.display = 'none';
        }
    };

    fetchBadges();

    function fetchBadges() {
        fetch('/api/badges')
            .then(response => response.json())
            .then(data => {
                const list = document.getElementById('badgesList');
                list.innerHTML = ''; // Clear previous list
                data.forEach(badge => {
                    fetch(`/api/badges/${badge.badgeId}/users`)
                        .then(response => response.json())
                        .then(users => {
                            const badgeElement = document.createElement('div');
                            badgeElement.innerHTML = `
                                <button class="link-button" onclick="toggleUsers('${badge.badgeId}', this)">
                                    <span>${badge.name} (${users.length} users)</span>
                                </button>
                                <button class="link-button" onclick="deleteBadge('${badge.badgeId}')">
                                    <span>❌</span>
                                </button>
                                <ul id="users-${badge.badgeId}" style="display:none;"></ul>
                            `;
                            list.appendChild(badgeElement);
                        });
                });
            });
    }

    window.deleteBadge = function(badgeId) {
        fetch(`/api/badges/${badgeId}`, { method: 'DELETE' })
            .then(response => {
                if (response.ok) fetchBadges();
                else alert('Failed to delete badge');
            });
    };

    window.toggleUsers = function(badgeId, button) {
        const userList = document.getElementById(`users-${badgeId}`);
        if (userList.style.display === 'none') {
            fetch(`/api/badges/${badgeId}/users`)
                .then(response => response.json())
                .then(data => {
                    userList.innerHTML = ''; // Clear list
                    data.forEach(user => {
                        const userItem = document.createElement('li');
                        userItem.textContent = `${user.username} (User ID: ${user.userId})`;
                        userList.appendChild(userItem);
                    });
                    userList.style.display = 'block';
                });
        } else {
            userList.style.display = 'none';
        }
    };
};
</script>
</html>